---
title: Product Architecture
homework: published
desc: The role of the architecture in the plan
---
<%= homework_hdr %>

1. Study and read up on the [Nest Thremostat](http://nest.com/thermostat/life-with-nest-thermostat/). The purpose of this homework is for you to practice applying what we have been learning about user experience to a product that you don't know yet.

	Look for articles describing the user interface of the device and play with the demos on their site. You will find videos that describe the installation and the use of the NEST. You might also find articles that either complain or compliment the user interface of the NEST. What do you think they have done right, and what have they not done great?

	<%= deliverable "Write a post giving your assessment of the Nest User Experience. What is good and what might be better in their user experience, and what do you base your opinion on?" %>
1. Meet with your team for 1-2 hours.
	* Do a more detailed and complete iteration of your User Experience flow, including paper prototypes and the UX flow itself. <%= team_deliverable "Document your user experience flow. Make paper prototypes of all the important screens. Prepare to do a usability test with it." %>
	* Have a wide ranging discussion about your hypotheses and what more testing you need to do. Refer especially to my guidelines from a week ago about how to improve all the projects:
		* **Think bigger.** You will need to make a case that the product will be a viable business.
		* **Be Serious.** Your work is evaluated not just on whether you follow the steps or the format but based on whether you are being realistic and intellectually honest about your proposal. Would you actually pitch this to an Angel?
		* **Get Out.** Everyone needs to get out of the building more. Go beyond your friends. Talk to strangers!
		* **Pivot.** If you need to. Real startups pivot if the evidence is not coming in. Zoom out pivot if your idea is too small.
		* **Presentation.** Professional, neat, readable etc.
		* **Frame 2.** You will have a chance to improve and revise Frame 1, as it is part of Frame 2
	* <%= italic_red "Make notes of changes and plans to incorporate into your Frame 2 Report which is coming in two weeks."%>


#### Discussion
* Final Presentations Day: TBD
	* Review rest of the calendar
	* Review <%= link_to_topic :final_deliverables %>
	* Review <%= link_to_topic :term_project_report_draft_2 %>
	* Review topics that were left out due to schedule

#### Architecture's role in this stage

* These form hypotheses like any other solution hypothesis
* For example
	* Can it be built? ("the Moodle api is rich enough to allow this product to be builtthe Moodle api is rich enough to allow this product to be built.")
	* How long will it take? ("the product can be built to release 1 in 3 months")
	* Will it perform? ("the product will be able to support 10,000 users in the first release")
	* Should we use Android or iPhone, etc.  ("it is safe to ignore the iPhone platform")
	* What would it cost to manufacture?  ("The first 100 units can be manufactured for $10 per")
	* ... etc.
* These kinds of hypotheses need to be answered from a technical/technologoical perspective
* How would you test the hypothesis?
	* Check with some experts to corroborate your hypothesis
	* Show them your design concept
	* Build a prototype/experiment/mvp to validate *that assumption* specifically
* For example distinguish between:
	* Customers will require that we support both iPhone and Android
	* Our architecture can work on iPhone and Android
	* Different questions, requiring different experiments to check
* Common Fundamental Architectural and Technology questions
	* Scale: How do we support the required number of users
	* Deployment vehicle: Cloud, Web, Mobile or Device
	* <%= discussion "Did I leave any out?" %>
* What about the 'secret sauce?'
	* Your app may or may not require some
	* You might consider it your competitive advantage and even patent it
	* Most of your work (80% overall) will not be advanced computer science or new invention
	* For a real commercial product, most of the work will be hard engineering

#### Web and Cloud Architecture
* <%= discussion "Is there a difference? What are some of the tradeoffs?" %>
* A lot in common
	* Accessed using HTTP/REST protocols (typically)
	* Accessed with a web browser or mobile app (typically)
* What does the term "provisioning" mean?
* Overview of deployment
	* Web: means you own, or control, and manage, a complete set of servers for your application
	* Cloud: means you rent nodes in a cloud (e.g. Amazon Web Services)
	* What are web services?
* Big differences
	* "Elasticity"
	* "API control over provisioning"

<%= include_topic :innovators_dilemma %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
